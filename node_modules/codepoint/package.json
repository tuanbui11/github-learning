{
  "_args": [
    [
      "codepoint@0.0.0",
      "/home/tuanbui/nodejslab/node_modules/eji"
    ]
  ],
  "_from": "codepoint@0.0.0",
  "_id": "codepoint@0.0.0",
  "_inCache": true,
  "_installable": true,
  "_location": "/codepoint",
  "_npmUser": {
    "email": "koichik@improvement.jp",
    "name": "koichik"
  },
  "_npmVersion": "1.1.49",
  "_phantomChildren": {},
  "_requested": {
    "name": "codepoint",
    "raw": "codepoint@0.0.0",
    "rawSpec": "0.0.0",
    "scope": null,
    "spec": "0.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "/eji"
  ],
  "_resolved": "https://registry.npmjs.org/codepoint/-/codepoint-0.0.0.tgz",
  "_shasum": "79e08141f9b6218678ae79c70ea49e9907fb4e78",
  "_shrinkwrap": null,
  "_spec": "codepoint@0.0.0",
  "_where": "/home/tuanbui/nodejslab/node_modules/eji",
  "author": {
    "email": "koichik@improvement.jp",
    "name": "Koichi Kobayashi"
  },
  "dependencies": {},
  "description": "Utilities for Unicode codepoint",
  "devDependencies": {
    "expect.js": "*",
    "mocha": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "79e08141f9b6218678ae79c70ea49e9907fb4e78",
    "tarball": "https://registry.npmjs.org/codepoint/-/codepoint-0.0.0.tgz"
  },
  "engines": {
    "node": "*"
  },
  "homepage": "https://github.com/koichik/node-codepoint/",
  "keywords": [
    "code point",
    "unicode",
    "utf-16"
  ],
  "licenses": {
    "type": "The MIT License",
    "url": "http://www.opensource.org/licenses/mit-license.php"
  },
  "main": "./codepoint.js",
  "maintainers": [
    {
      "name": "koichik",
      "email": "koichik@improvement.jp"
    }
  ],
  "name": "codepoint",
  "optionalDependencies": {},
  "readme": "# Utitilities for Unicode code point based on Java API.\n\nIn this module, _Unicode code point_ is used for character values in the\nrange between `0x0000` and `0x10FFFF`.\nOn the other hand, _Unicode code unit_ is used for 16-bit integer values\nthat are code units of the UTF-16 encoding. \n\n## installation\n\n    $ npm install codepoint\n\n## API\n\n```javascript\nvar codepoint = require('codepoint');\n```\n\n### codepoint.MAX_CODE_POINT\n\nThe maximum value of a Unicode code point, constant `0x10FFFF`.\n\n### codepoint.MAX_HIGH_SURROGATE\n\nThe maximum value of a Unicode high-surrogate code unit in the UTF-16 encoding,\nconstant `0xDBFF`.\n\n### codepoint.MAX_LOW_SURROGATE\n\nThe maximum value of a Unicode low-surrogate code unit in the UTF-16 encoding,\nconstant `0xDFFF`.\n\n### codepoint.MAX_SURROGATE\n\nThe maximum value of a Unicode surrogate code unit in the UTF-16 encoding,\nconstant `0xDFFF`.\n\n### codepoint.MAX_CODE_UNIT\n\nThe maximum value of a Unicode code unit in the UTF-16 encoding,\nconstant `0xFFFF`.\n\n### codepoint.MIN_CODE_POINT\n\nThe minimum value of a Unicode code point, constant `0x0000`.\n\n### codepoint.MIN_CODE_UNIT\n\nThe minimum value of a Unicode code unit in the UTF-16 encoding,\nconstant `0x0000`.\n\n### codepoint.MIN_HIGH_SURROGATE\n\nThe minimum value of a Unicode high-surrogate code unit in the UTF-16 encoding,\nconstant `0xD800`.\n\n### codepoint.MIN_LOW_SURROGATE\n\nThe minimum value of a Unicode low-surrogate code unit in the UTF-16 encoding,\nconstant `0xDC00`.\n\n### codepoint.MIN_SUPPLEMENTARY_CODE_POINT\n\nThe minimum value of a Unicode supplementary code point, constant `0x10000`.\n\n### codepoint.MIN_SURROGATE\n\nThe minimum value of a Unicode surrogate code unit in the UTF-16 encoding,\nconstant `0xD800`.\n\n### codepoint.charCount(cp)\n\nDetermines the number of Unicode code units needed to represent the specified\nUnicode code point. If the specified code point is equal to or greater\nthan `codepoint.MIN_SUPPLEMENTARY_CODE_POINT`, then the function returns `2`.\nOtherwise, the function returns `1`.\n\n * Arguments\n   * `cp`: the Unicode code point to be tested.\n * Returns\n   * `2` if the Unicode code point is a valid supplementary code point;\n     `1` otherwise.\n\n### codepoint.codePointAt(str [, index])\n\nReturns the code point at the given `index` of the `str`.\nIf the code unit value at the given `index` in the `str` is in the\nhigh-surrogate range, the following `index` is less than the length\nof the `str`, and the code unit value at the following `index` is in\nthe low-surrogate range, then the supplementary code point corresponding\nto this surrogate pair is returned.\nOtherwise, the code unit value at the given `index` is returned.\n\n * Arguments\n   * `str`: the string.\n   * `index`: the index to the Unicode code units in `str` to be converted.\n     Defaults to `0`.\n * Returns\n   * the Unicode code point value at the given index.\n\n### codepoint.codePointBefore(str [, index])\n\nReturns the code point preceding the given `index` of the `str`.\nIf the code unit value at (`index - 1`) in the `str` is in the\nlow-surrogate range, (`index - 2`) is not negative, and the code unit\nvalue at (`index - 2`) in the `str` is in the high-surrogate range,\nthen the supplementary code point corresponding to this surrogate pair\nis returned.\nOtherwise, the code unit value at (`index - 1`) is returned.\n\n * Arguments\n   * `str`: the string.\n   * `index`: the index following the code point that should be returned.\n     Defaults to `str.length`.\n * Returns\n   * the Unicode code point value before the given index.\n\n### codepoint.codePointCount(str [, beginIndex [, endIndex]])\n\nReturns the number of Unicode code points in the text range of the specified\n`str`. The text range begins at the specified `beginIndex` and extends to\nthe Unicode code unit at index `endIndex - 1`.\nThus the length (in code units) of the text range is `endIndex-beginIndex`.\nUnpaired surrogates within the text range count as one code point each.\n\n * Arguments\n   * `str`: the string.\n   * `beginIndex`: the index to the first code unit of the text range.\n     Defaults to `0`.\n   * `endIndex`: the index after the last code unit of the text range.\n     Defaults to `str.length`.\n * Returns\n   * the number of Unicode code points in the specified text range.\n\n### codepoint.forEachCodePoint(str, cb [, thisArgs])\n\nExecutes a provided function (`cb`) once for each code point present in\nthe `str`.\n\n * Arguments\n   * `str`: the string.\n   * `cb`: callback function.\n   * `thisArg`: `this` value for each invocationof `cb`.\n     if it is not provided, `undefined` is used instead.\n\n`cb` is invoked with three arguments:\n\n * Arguments\n   * `cp`: the code point value.\n   * `index`: the index to the code point of the `str`.\n     (i.e. `cp === codepoint.codePointAt(str, index)`)\n   * `str`: the string being traversed.\n\n### codepoint.fromCodePoint([cp, ...])\n\nReturns a string value containing as many code points as the number of\narguments. Each argument specifies one code point of the resulting string,\nwith the first argument specifing the first code point, and so on,\nfrom left to right.\n\n * Argument\n   * `cp`: Unicode code point.\n * Returns\n   * the string.\n\n### codepoint.highSurrogate(cp)\n\nReturns the leading surrogate (a high surrogate code unit) of the surrogate\npair representing the specified supplementary code point in the UTF-16\nencoding.\nIf the specified Unicode code point is not a supplementary code point,\nan unspecified code unit is returned.\n\n * Arguments\n   * `cp`: a supplementary code point.\n * Returns\n   * the leading surrogate code unit used to represent the character\n     in the UTF-16 encoding\n\n### codepoint.isBmpCodePoint(cp)\n\nDetermines whether the specified Unicode code point is in the Basic\nMultilingual Plane (BMP). Such code points can be represented using a\nsingle code unit.\n\n * Arguments\n   * `cp`: the Unicode code point to be tested.\n * Returns\n   * `true` if the specified code point is between `codepoint.MIN_CODE_POINT`\n     and `codepoint.MAX_CODE_UNIT` inclusive; `false` otherwise.\n\n### codepoint.isHighSurrogate(cu)\n\nDetermines if the given Unicode code unit is a Unicode high-surrogate\ncode unit (also known as leading-surrogate code unit).\n\n * Arguments\n   * `cu`: the Unicode code unit to be tested.\n * Returns\n   * `true` if the code unit is between `codepoint.MIN_HIGH_SURROGATE` and\n     `codepoint.MAX_HIGH_SURROGATE` inclusive; `false` otherwise.\n\n### codepoint.isLowSurrogate(cu)\n\nDetermines if the given Unicode code unit is a Unicode low-surrogate\ncode unit (also known as trailing-surrogate code unit).\n\n * Arguments\n   * `cu`: the Unicode code unit to be tested.\n * Returns\n   * `true` if the code unit is between `codepoint.MIN_LOW_SURROGATE` and\n     `codepoint.MAX_LOW_SURROGATE` inclusive; `false` otherwise.\n\n### codepoint.isSupplementaryCodePoint(cp)\n\nDetermines whether the specified Unicode code point is in the supplementary\ncharacter range.\n\n * Arguments\n   * `cp`: the Unicode code point to be tested.\n * Returns\n   * `true` if the specified code point is between\n     `MIN_SUPPLEMENTARY_CODE_POINT` and `MAX_CODE_POINT` inclusive;\n     `false` otherwise.\n\n### codepoint.isSurrogate(cu)\n\nDetermines if the given Unicode code unit is a Unicode surrogate code unit.\n\n * Arguments\n   * `cu`: the Unicode code unit to be tested.\n * Returns\n   * `true` if the code unit is between `codepoint.MIN_SURROGATE` and\n     `codepoint.MAX_SURROGATE` inclusive; `false` otherwise.\n\n### codepoint.isSurrogatePair(highCu, lowCu)\n\nDetermines whether the specified pair of code units is a valid Unicode\nsurrogate pair.\n\n * Arguments\n   * `highCu`: the high-surrogate code unit to be tested.\n   * `lowCu`: the low-surrogate code unit to be tested.\n * Returns\n   * `true` if the specified high and low-surrogate code values represent\n     a valid surrogate pair; `false` otherwise.\n\n### codepoint.lowSurrogate(cp)\n\nReturns the trailing surrogate (a low surrogate code unit) of the\nsurrogate pair representing the specified supplementary code point in the UTF-16 encoding.\nIf the specified code point is not a supplementary character, an unspecified\ncode unit is returned.\n\n * Arguments\n   * `cp`: a supplementary code point.\n * Returns\n   * the trailing surrogate code unit used to represent the character\n     in the UTF-16 encoding\n\n### codepoint.offsetByCodePoints(str, index, codePointOffset)\n\nReturns the index within the given `str` that is offset from the given `index`\nby `codePointOffset` code points. Unpaired surrogates within the text range\ngiven by `index` and `codePointOffset` count as one code point each.\n\n * Arguments\n   * `str`: the string.\n   * `index`: the index to be offset.\n   * `codePointOffset`: the offset in code points.\n * Returns\n   * the index within the `str`.\n     `-1` if `index` is negative or larger then the length of the `str`,\n     or if `codePointOffset` is positive and the subsequence starting\n     with `index` has fewer than `codePointOffset` code points, or if\n     `codePointOffset` is negative and the subsequence before `index` has\n     fewer than the absolute value of `codePointOffset` code points.\n\n### codepoint.toChars(cp)\n\nConverts the specified Unicode code point to its UTF-16 representation\nstored in an array of code units. If the specified code point is a BMP\n(Basic Multilingual Plane or Plane 0) value, the resulting array has\nthe same value as codePoint. If the specified code point is a supplementary\ncode point, the resulting array has the corresponding surrogate pair.\n\n * Arguments\n   * `cp`: a Unicode code point\n * Returns\n   * an array of code units having codePoint's UTF-16 representation.\n\n### codepoint.toCodePoint(highSurrogate, lowSurrogate)\n\nConverts the specified surrogate pair to its supplementary code point value.\nThis method does not validate the specified surrogate pair. The caller must\nvalidate it using `codepoint.isSurrogatePair()` if necessary.\n\n * Arguments\n   * `highSurrogate`: the high-surrogate code unit.\n   * `lowSurrogate`: the low-surrogate code unit.\n * Returns\n   * the supplementary code point composed from the specified surrogate pair.\n\n# License\n\nnode-codeunit is licensed under the\n[MIT license](http://www.opensource.org/licenses/mit-license.php).\n",
  "repositories": "https://github.com/koichik/node-codepoint.git",
  "repository": {
    "type": "git",
    "url": "h"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "version": "0.0.0"
}
